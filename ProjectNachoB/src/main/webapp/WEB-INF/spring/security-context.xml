<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	
	<bean id="customAccessDenied" class="org.baek.security.CustomAccessDeniedHandler"></bean>
	<bean id="customLoginSuccess" class="org.baek.security.CustomLoginSuccessHandler"></bean>
	<!-- 로그인시에만 이동 되도록 주석 -->
	<!-- <bean id="customLogoutSuccess" class="org.baek.security.CustomLogoutSuccessHandler"></bean> -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	<bean id="customUserDetailService" class="org.baek.security.CustomUserDetailService"></bean>
	
	<!-- 화면 이동, 로그인 로그아웃 담당 -->
	<!-- intercept-url 중간에 url을 받는다고 보면 된다 -->
	<!-- db의 role(자격부여, 회수) 개념이 들어간다 -->
	<!-- sample/member로 들어가면 자동으로 로그인 화면이 나온다. 자동으로 지원해주는 기능 -->
	
	
	<!-- use-expressions : 표현식 이용여부, false는 단순 문자열만 사용 -->
	<security:http auto-config="true" use-expressions="true">
		<!-- 페이지 별 접근제한 설정 -->
		<security:intercept-url pattern="/sample/all" access="permitAll"/>
		<security:intercept-url pattern="/sample/member" access="hasRole('ROLE_MEMBER')"/>
		<security:intercept-url pattern="/sample/admin" access="hasRole('ROLE_ADMIN')"/>
		
		<!-- 이게 있어야 @preAthorize 가 안된 상태에서 nachoCustomLogin으로 넘어간다. successHandler는 주석처리 -->
		<security:form-login login-page="/nachoCustomLogin"/>
		
		
		<!-- /customLogin으로 거쳐서 CommonController를 거쳐서 /customLogin으로 간다. -->
		<!-- 관리자랑 일반인이랑 같은 곳에서 로그인할 때 이런식으로 member에서 admin으로 이동할 수 있다. -->
		
		<!-- 로그아웃시 처리 -->
		<security:logout logout-url="/customLogout" invalidate-session="true" delete-cookies="remember-me,JSESSIONID" 
		logout-success-url="/project/main"/>
		<!-- invalidate-session : 세션 초기화 -->
		<!-- 로그아웃시 쿠키 삭제를 위해 뒤에  delete-cookies 추가 -->
		
		
		<!-- <security:access-denied-handler error-page="/accessError"/> -->
		<!-- 예전에는 컨트롤러(url로 jsp연결해서)로 태웠지만 이제는 클래스(DeniedHandler객체를 만들어 연결)로 아래 방식으로 태운다 -->
		<security:access-denied-handler ref="customAccessDenied"/>
		
		<!-- 웹 사이트의 취약점을 이용하여 이용자가 의도하지 하지 않은 요청을 통한 공격을 막아주는 역할( 쿠키로 공격)
				안하면 에러떠서 게시판 조차 나오질 않는다. 보안 관련 문제임. 복잡하니까 여기까지만 -->
		<security:csrf disabled="true"/>
		
		<!-- DB를 이용한 자동 로그인(1주일) -->
		<security:remember-me data-source-ref="dataSource" token-validity-seconds = "604800"/>
		
	</security:http>
	
	
	<!-- 인증 담당 -->
	<!-- {noop} db로 넘어갈려면 encoding을 해야되는데 encoding없이 사용하겠다는 명령어 -->
	<!-- 로그인을 하면 sample/member로 넘어간다 -->
	<!-- ADMIN(관리자)는 두곳에 다 들어갈 수 있어야 하므로 ROLE_MEMBER도 추가 -->
	<security:authentication-manager>
		<security:authentication-provider user-service-ref ="customUserDetailService">
			
			<!-- 내가 책보고 추가함, 쿼리 사용하기 위해서 (657p) -->
			<!-- <security:jdbc-user-service data-source-ref="dataSource"
				users-by-username-query = "select * from member where mid = ?" 
				authorities-by-username-query="select mid, auth from member_auth where mid = ?"/> -->

			<security:password-encoder ref="bcryptPasswordEncoder"/>
			
			<!-- <security:jdbc-user-service data-source-ref="dataSource" 
			users-by-username-query="select userid, userpw, enabled from tbl_member where userid=?"
          authorities-by-username-query="select userid, auth from tbl_member_auth where userid=?"/> -->
					<!-- 이름 쿼리를 가져옴 -->
					<!-- 권한 쿼리를 가져옴 -->
			
			
			
		<!-- <security:user-service>  이건 테스트할려고 고정값을 쓴것, db에 데이터를 넣었으므로 필요 x
				<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>여긴 임시로 잡은 것이였다.
				<security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN, ROLE_MEMBER"/>
				인증이랑 권한이랑 다르다. name 이랑 password가 맞는 것이 인증, authorities가 권한 
			</security:user-service> -->
		</security:authentication-provider>
	</security:authentication-manager>

</beans>
